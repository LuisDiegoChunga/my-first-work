# -*- coding: utf-8 -*-
"""reacciones_adversas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1efWHI4vO2JV1Lxo6TXHERq56pNoz7xbL
"""

import pandas as pd
import io

import numpy as np

from sklearn.model_selection import train_test_split


df = pd.read_csv('C://Users//LUIS DIEGO//Documents//CURSO SEMINARIO DE INVESTIGACION II - LUIS CHUNGA//DatosReacciones2.csv')

train, test = train_test_split(df, test_size=0.3)

len(train)

len(test)

df.describe()

df.head()

from sklearn.neural_network import MLPClassifier

X = train[train.columns[0:17]]

len(X)

y = train[train.columns[26]] #Fiebre

len(y)

X_train, X_test, y_train, y_test = train_test_split(X, y)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
# Fit only to the training data
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

mlp = MLPClassifier(hidden_layer_sizes=(30,30,30))

mlp.fit(X_train,y_train)

MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,
       beta_2=0.999, early_stopping=False, epsilon=1e-08,
       hidden_layer_sizes=(30, 30, 30), learning_rate='constant',
       learning_rate_init=0.001, max_iter=200, momentum=0.9,
       nesterovs_momentum=True, power_t=0.5, random_state=None,
       shuffle=True, solver='adam', tol=0.0001, validation_fraction=0.1,
       verbose=False, warm_start=False)

predictions = mlp.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(y_test,predictions))

print(classification_report(y_test,predictions))

from sklearn.model_selection import KFold
kf = KFold(n_splits=10)

from sklearn import cross_validation

scores = cross_validation.cross_val_score(mlp, X, y, cv=10)

scores

print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), scores.std() / 2))



#from sklearn.ensemble import RandomForestRegressor

#rf = RandomForestRegressor(n_estimators = 1000, random_state = 42)

#rf.fit(X_train,y_train)

import pickle
# save the model to disk
filename = 'modelo.sav'
pickle.dump(mlp, open(filename, 'wb'))